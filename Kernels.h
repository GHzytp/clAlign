static char* sMultiCorrelation =
"__kernel void clMultiCorrelation(__global const float2* fft1, __global const float2* fft2, __global float2* PCF,__global float2* XCF, int width, int height) \n"
"{		\n"
"	//Get the work items ID \n"
"	int xid = get_global_id(0);	\n"
"	int yid = get_global_id(1); \n"
"	if(xid<width&&yid<height) \n"
"	{	\n"
"		int Index = xid + yid*width; \n"
"		float c1r = fft1[Index].x; \n"
"		float c1i = fft1[Index].y; \n"
"		float c2r = fft2[Index].x; \n"
"		float c2i = fft2[Index].y; \n"
//"		PCF[Index].x = (c1r*c2r + c1i*c2i)*rsqrt((c1r*c1r*c2r*c2r + c1i*c1i*c2i*c2i + c1r*c1r*c2i*c2i + c2r*c2r*c1i*c1i)); \n"
//"		PCF[Index].y = (c2i*c1r - c1i*c2r)*rsqrt((c1r*c1r*c2r*c2r + c1i*c1i*c2i*c2i + c1r*c1r*c2i*c2i + c2r*c2r*c1i*c1i)); \n"
"		XCF[Index].x = (c1r*c2r + c1i*c2i); \n"
"		XCF[Index].y = (c2i*c1r - c1i*c2r); \n"
"	}	\n"
"}		\n"
;

static char* sfftShift =
"__kernel void clfftShift(__global const float2* Input, __global float2* Output, int width, int height) \n"
"{		\n"
"	//Get the work items ID \n"
"	int xid = get_global_id(0);	\n"
"	int yid = get_global_id(1); \n"
"	if(xid < width && yid < height) \n"
"	{	\n"
"		int Index = xid + yid*width; \n"
"		int Yshift = width*height/2; \n"
"		int Xshift = width/2; \n"
"		int Xmid = width/2; \n"
"		int Ymid = height/2; \n"
"		if( xid < Xmid && yid < Ymid ) \n"
"		{ \n"
"			Output[Index+Yshift+Xshift].x = Input[Index].x; \n"
"			Output[Index+Yshift+Xshift].y = Input[Index].y; \n"
"		} \n"
"		else if( xid >= Xmid && yid < Ymid ) \n"
"		{ \n"
"			Output[Index+Yshift-Xshift].x = Input[Index].x; \n"
"			Output[Index+Yshift-Xshift].y = Input[Index].y; \n"
"		} \n"
"		else if( xid < Xmid && yid >= Ymid ) \n"
"		{ \n"
"			Output[Index-Yshift+Xshift].x = Input[Index].x; \n"
"			Output[Index-Yshift+Xshift].y = Input[Index].y; \n"
"		} \n"
"		else if( xid >= Xmid && yid >= Ymid ) \n"
"		{ \n"
"			Output[Index-Yshift-Xshift].x = Input[Index].x; \n"
"			Output[Index-Yshift-Xshift].y = Input[Index].y; \n"
"		} \n"
"	}	\n"
"}	\n"
;

static char* sBilinearInterpolate =
"__kernel void clBilinearInterpolate(__global const float2* Input, __global float2* Output, int fullwidth, int fullheight, int padLeft, int padRight, int padTop, int padBottom, float xShift, float yShift, int newwidth, int newheight, int iTop, int iLeft) \n"
"{ \n"
"	//Get the work items ID \n"
"	int xid = get_global_id(0);	\n"
"	int yid = get_global_id(1); \n"
"	if(xid < newwidth && yid < newheight) \n"
"	{	\n"
"		int Index = xid + yid*newwidth; \n"
"		int xs2 = floor(xShift); \n"
"		int ys2 = floor(yShift); \n"
"		float subx = xShift - xs2; \n"
"		float suby = yShift - ys2; \n"
"		if((xid < padLeft || xid >= (newwidth - padRight)) || (yid < padTop || yid >= (newheight - padBottom))) \n"
"		{ \n"
"			Output[Index].x = 0; \n"
"			Output[Index].y = 0; \n"
"		} else { \n"
"			float v1 = (1-subx)*(1-suby)*Input[iLeft + xs2 + xid + (iTop+ys2+yid)*fullwidth].x; \n"
"			float v2 = (subx)*(1-suby)*Input[iLeft + xs2 + xid + 1 + (iTop+ys2+yid)*fullwidth].x; \n"
"			float v3 = (1-subx)*(suby)*Input[iLeft + xs2 + xid + (iTop+ys2+yid + 1)*fullwidth].x; \n"
"			float v4 = (subx)*(suby)*Input[iLeft + xs2 + xid + 1 +(iTop+ys2+yid + 1)*fullwidth].x; \n"
"			Output[Index].x = v1 + v2 + v3 + v4; \n"
"			Output[Index].y = 0.0f; \n"
"		} \n"
"	}	\n"
"}	\n"
;